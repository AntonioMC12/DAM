Punto 3.2 TIPO DE INTERRELACIÓN

-Fuertes o Regulares
    Asocian dos entidades Regulares,
-Debiles
    Asocian una entidad débil con otra Regular de la que depende. Estas exigen que al lado de la entidad Regular
    la cardinalidad sea siempre (1,1). Dos entidades débiles no pueden estar relacionadas.

Dentro de la entidades débiles encontramos dependencia en existencia y en identificación.
    -dependencia en existencia: en estas las ocurrencias del tipo de entidad débil no pueden existir sin la ocurrencias
    del tipo de entidad regular de la que depende. Se indican mediante una "EX" en el rombo. Ej:
    -depende de identificación: ademas de la dependencia de existencia, la entidad débil necesita de la clave de la regular
    para identificarse. se reperesenta mediante las letras "ID" en el rombo.
    
*****************

Ejemplos ejercicio 1

*****************


---------------------------------------------------------------------------------------------------------------------------

Tema 5

El Modelo Relacional

1.- INTRODUCCIÓN

    propone una representación de la información en forma de tablas bidimensionales, una tabla es una matriz rectangular identificada
    por un nombre único en todo el modelo y en la cual cada elemento de la tabla es un 'item' de datos particular.

    Con esta forma de representación intentaremos implantar una base de datos en un sistema informático concreto

*****************

Ejemplo 000 cuaderno

*****************

    Características del Modelo:

        * Idenpendencia física: en las bases de datos relacionales la forma en la que se almacenan los datos es completamente independiente
        de su manipulación lógica.
        * Idenpendencia lógica: lirá ofra modificación de cualquiera de los elementos de la base de datos en principio no influirá en los
        programas que la usen.
        * Flexibilidad: Permitecer los datos de la forma más adecuada a nuestras necesidades
        * Uniformidad: toda la información se guarda de manera uniforme, en forma de tablas, lo que facilita su manipulación

2.- ELEMENTOS DEL MODELO RELACIONAL

    En este modelo se guardarán las tablas como componentes principales, también llamadas relaciones, y junto a ellas las interrelaciones entre 
    las distintas tablas, las restricciones y los procedimientos.

    2.1 .- RELACIONES O TABLAS

     Es el elemento principal y básico del modelo relacional, y será una relación o lista de valores. Cada relación tendrá su nombre, que será único 
     en todo el modelo, atributos, que son las propiedades de la tabla y forman las columnas. Dan significado a los datos de esa columna y *su nombres
     será único dentro de caada tabla* y por último, tuplas o filas de la tabla, son las ocurrencias, son los datos en sí mismo. 

     A partir de eso, sacamos otros 3 conceptos. 
        *Grado, es su númro de atributos. 
        *Cardinalidad, numero de tuplas de una tabla
        *Valor, que es el cruce de una fila y una columna. es un item concreto de datos. Puede haber valores nulos y vacíos.

     Una tabla por tanto se compone de una cabecera que define su estructura, que es fija y un cuerpo que varía a lo largo del tiempo.

     *representación de las tablas*

     Para representar las tablas, se puede hacer de dos formas:

        *De forma textual: en esta representación las tablas se indican primero por su nombre y a continuación entre paréntesis los atributos que tiene 
        La clave primaria se subraya con un trazo continuo y las claves alternativas (si las hubiera) con trazo discontinuo. Esta será la representación
        que utilicemos nosotros.

        ************

        EJEMPLO 001

        ************

        *De forma gráfica:

        ***********

        EJEMPLO 000

        ***********

     *Claves*

     En todas las relaciones o talbas, debe haber un atributo o conjunto de estos que tome valores únicos para cada una de las tuplas de la relación. Estas
     serán las claves candidatas. De entre todas las que haya, se elegirá una como clave principal y el resto serán claves alternativas. A la hora de escoger
     la clave primaria, en caso de que haya mas de una opción, deberíamos elegir la que más se vaya a utilizar en el problema.


        *Clave primaria o principal: toda las tablas tiene que tener una clave primaria
        *Clave alternativas
        *Clave foraneas o ajenas: no tiene porque aparecer en todas las tablas, ya que puede haber tablas referenciadas, pero que no referencian. cada una de estas 
        claves ajenas será un atributo o conjunto de estos por cuyos valores se relacionan esa tabla con otra, en la que se corresponde con valores de la clave, por 
        se llama así. Ambos atributos, clave ajena y clave referenciada tienen que estar definidos sobre el mismo dominio.


        ***********

        EJEMPLO 002

        ***********

    2.2 INTERRELACIONES

        Las interrelaciones son la lineas que vinculan unas tablas con otras, se pueden describir y guardar en la base de datos convirtiendose en lo que se conoce como 
        *Las reglas de integridad referencial*.

        ------------------------------
        Ejercicio:
        Una base de datos con información de los empleados y los departamentos que contiene esa empresa (nombre departamento, ubicacion, ) quiero reflejar que un empleados
        pertenece a un departamento o que no pertenece a ninguno y que un empleado puede tener de jefe a otro empleado.
        ------------------------------

        Además de definir las claves ajenas que me permiten relacionar tablas entre si, hay que determinar las consecuencias de realizar operaciones de borrado o modificación
        de tuplas referenciadas. Las posibles acciones son las siguientes:

            *   Opereación restringida (NO ACTION): El borrado o modificación de tuplas referenciadas no se permite si hay valores en otras tablas que lo referencian. Suele 
            ser la opereación por defecto.
            *   Opereación con transmisión en cascada (CASCADE): El borrado o modificación de tuplas referenciadas, implica el borrado o modificación de las tuplas que lo 
            referencian.
            *   Operación con pesta a nulos (SET NULL): El borrado o modificación de tuplas referenciadas implica la puesta a nulos de valores en las tuplas que referenciada.
            *   Operación con puesta a valor por defecto (SET DEFAULT): El borrado o modificación de tuplas referenciadas implica la puesta a su valor por defecto de las tuplas
            que lo referencian.

    2.3 RESTRICCIONES
        En el modelo relacional tenemos dos tipos de restricciones a las que se debe adaptar el problema representado

        Inherentes: son las restricciones propias del modelo relacional y son las siguientes:

            -No hay dos tuplas iguales
            -El orden de las tuplas no importa
            -El orden de los atributos no importa
            -Cada atributo toma un solo valor de su dominio
            -Ningun atributo que forma parte de la clave puede ser nulos

        Semánticas o de usuario:
        
        Son las que tienen que ver con el significado de los datos y permitiran al diseñador reflejar en el esquema, la semantica del mundo real de la manera mas fiel 
        posible. Estas restricciones limitarán el conjunto de valores validos que los atributos pueden tomar dentro de las tuplas. Se aplicarán sobre los distintos 
        atributos y las principales que existen son las siguientes:
            
            -Clave Primaria (Primary Key [PK]): será el atributo o conjunto de estos, que contiene un valor único para toda la tabla identificando cada tupla de forma unívoca
            como ya habíamos dicho anteriormente, se maracarán subrayando estos atributos.
            
            -Unicidad (UNIQUE): indica que los valores del atributo donde se aplica no puden repetirse en distintas tuplas o filas. No se debe aplicar a las claves alternativas
            ya que UNIQUE permite valores nulos y no es necesario especificarlo para la clave primaria ya que va implícito en ella. Nosotros lo marcaremos añadiendo una 'U' debajo
            de los atributos que deban cumplirlo.
           
            -Obligatoriedad (NOT NULL [NN]): El atributo donde se aplica no puede tener valores nulos, también está implícito en la clave primaria, para indicarlo lo pondremos con las 
            iniciales NN debajo.
           
            -Integridad Referencial (Foreing Key [FK]): Se aplica sobre las claves ajenas que relacionan las tablas entre si. se definirán sobre los atributos que se han propagado desde
            otras tablas y que me permiten enlazar con ellos. Este atributo solo podrá tomar, o valores nulos o valores que formen parte del dominio de la clave principal de la tabla 
            con la que se enlaza. Los reconoceremos, porque son los atributos de donde parten las flechas. Estas flechas deben partir de ellos y llegar al nombre de la tabla con la que
            se relaciona, también podemos marcarlos con las iniciales C.A.

            -Operación con Verificación (CHECK condición): Es otra reglas semántica que se puede aplicar a cualquier atributo y se usa para especificar condiciones que deben cumplir sus 
            valores. Si al realizar una operación el atributo no cumple la condición, se rechaza la operación y se ejecuta un procedimiento o disparador (TRIGGER). Esta condición si es 
            compleja se debería especificar en un documento anexo al esquema relacional.
            
            -Valor por Defecto (DEFAULT valor): Es otro tipo de regla semántica que en principio se puede aplicar sobre cualquier atributo. Esta regla existe para especificar el valor que 
            debe tomar un atributo si no se indica expresamente otro valor para ese campo, se indicará mediante el rótulo [DEFAULT valor] debajo del campo en cuestión.

        Cualquiera de estas restricciones se puede aplicar en principio sobre cualquier atributo de cualquier tabla. Se podrán aplicar y combinar varias de ellas sobre un mismo atributo.
    
    2.4 PROCEDIMIENTOS Y DISPARADORES ALMACENADOS

        *Procedimiento*: Es una operación o conjunto de estas que se almacenará junto a la base de datos y que se podrá ejecutar en cualquier momento a petición del usuario. Serán utilizadas 
        sobretodo, para tareas tediosas o que se repiten con mucha frecuencia, como por ejemplo realizar copias de seguridad. Básicamente son lo mismo que los disparadores, pero no están 
        asociados a ninguna circunstancia que los ejecute automáticamente

        *Disparadores (TRIGGERS)*: Son procedimientos que se ponen en marcha automáticamente cuando sucede algo previsto, como por ejemplo, insertar un nuevo registro en una tabla. Los 
        disparadores tienen 3 partes:

            -*Nombre* del disparador que lo identifica
            -*Restriccion* o regla que deben cumplir los datos
            -*Respuesta* o acción en caso de que se incumpla la regla.

    3 CONCEPTO DE TRANSACIÓN

        Una trasación es un grupo de varias operaciones que se deben realizar todas en su conjunto y de forma correcta. Si una de ellas fallara o no se pudiera realizar, deberían deshacerse
        todas las operaciones previas, pasos parciales, y quedar el estado de la base de datos como antes de comenzar la transación.

    4 LOS VALORES NULOS EN EL MODELO RELACIONAL

    5 LENGUAJES PROPIOS PARA LA GESTION DE BD RELACIONALES 

        En las bases de datos relacionales nos encontramos con un solo lenguaje unificado, capaz de gestionar todo en la base de datos, que es SQL(Structured Query Languaje) que tiene varias
        variantes y caracter propio, pero que se subdivide en 3 o 4 sublenguajes distintos.

            -DDL(data definition languaje)
            -DML(data management languaje)
            -DCL(data control languaje)
            -TCL(transaction control languaje)

            DDL: Son las intruciones de creación y eliminacion de datos (CREATE, ALTER, DROP, ...)
            DML: Son las instrucciones que nos permiten modificar datos (SELECT, UPDATE, ...)
            DCL: Son las intrucciones que nos permite dar y quitar permisos (GRANT, ...)
            TCL: Son las instrucciones que nos permite crear transacciones (START TRANSACTION, BEGIN, ...)

            



-------------------------------------------------------------------------------------------------------------------------------

TEMA 6: Transformación de Esquemas E-R a Relacional

-------------------------------------------------------------------------------------------------------------------------------            

    1- Etapas de una metodología de diseño.
        En el diseño de base de datos se distinguen 3 fases que son:
            
            -Diseño conceptual
            -Diseño lógico
            -Diseño físico

        *Diseño conceptual:*
            En esta fase se obtiene una representación gráfica o no de la información de aquella realidad que queremos almacenar de la base de datos, independientemente de los usuarios
            aplicaciones y hardware que se emplea. Con este diseño obtenemos el *modelo o esquema conceptual*

        *Diseño lógico:*
            Con el diseño lógico transformamos el esquema conceptual de la fase anterior a un modelo de datos que se apoye en un sistema gestor de base de datos (SGBD) concreto. Tras esta 
            fase obtenemos el *modelo lógico.*

        *Diseño físico:*
            En esta fase intentamos conseguir una instrumentalización lo más eficiente posible de cara a la máquina que se utiliza en el sistema, con esta fase obtenemos el *modelo o esquema 
            físico.*
        
        El modelo conceptual recoge más semántica que el modelo lógico.

        A la hora de diseñar una base de datos, debe haber una comunicación fluida entre el diseñador y la pesrsona que conoce todos los detalles de la información que se va a manejar, ocn el fin 
        de que quede completamente tomada y representada. Esto se da normalmente a través del esquema E-R.

    2- Transformación del Esquema Conceptual (E-R) al lógico (Relacional)
        Esta transación se lleva a cabo utilizando un conjunto de reglas bastante sencillas que se van aplicando sucesivamente al esquema E-R hasta convertirlo por completo en Relacional o tablas.
        Posteriormente habrá que normalizar estas tablas, cosa que no haremos este año y las reglas de las que hemos hablando son las siguientes:

            REGLAS 

            2.1- Todo tipo de entidad se convierte en una relación o tabla

                ------------------------------------------------
                Ejemplo
                     -------
                    | LIBRO |
                     -------    
                        * ISBN      =>  LIBRO(ISBN,titulo,autor)
                        - titulo
                        - autor
                ------------------------------------------------

                -Los atributos de cada entidad se añaden como campos de la relación.
                -Las claves principales se subrayan con trazo continuo.
                -Las claves alternatives se subrayan con trazo discontinuo.

                Si bien lo que vamos a ver a continuación _no forma parte del modelo relacional tradicional_ hemos de tener en cuenta que para ser un diseño completo
                deberíamos además indicar lo siguiente:

                    -Los atributos que no puedan ser nulos, es decir, que sean obligatorios rellenarlos, se indecaran poniendo "NN"(NOT NULL) debajo.
                    -Los atributos cuyo valor debe ser único entre todas las tuplas, se indicará poniendo una "U"(UNIQUE) debajo.
                    -Los atributos cuyos valores deban cumplir alguna condición, se debe de especificar indicándolos con "CHECK(condicion)" debajo de ellos.
                    -Los atributos para los que al crear una tupla deban tomar un valor por defecto, si no se indica expresamente otra cosa, se debe de indicar poniendo "DEFAULT(valor)" debajo, siendo valor 
                    el dato que se asignará por defecto.

            2.2- Todo tipo de interrelación N:M se transforma en una relación o tabla

                -------------------------------------

                Ejemplo 2.1

                -------------------------------------

                En esta nueva tabla a la que da lugar la interrelación N:M deben aparecer como mínimo las claves de las tablas que se interrelaciónan, normalmente, la clave de esta tabla central suele ser la combinación de ellas.
                Cada una de estas dos claves que se han propagado a la tabla del medio, serán por separado las claves ajenas que relacionan la tabla central con las otras dos.

                De las claves ajenas de la relaciones, parten las flechas hacia las tablas de las que dependen, desde las cuales se han propagado.

                Si la interrelación tiene atributos, estos aparecen también en la nueva tabla intermedia.

            2.3 Todo tipo de interrelación 1:N se transforma mediante el fenómeno de propagación de clave o bien se crea una nueva tabla en medio.

                -----------------------------------------

                Ejemplo 2-2

                -----------------------------------------

                En este caso la clave de la editorial, lado de cardinalidad máxima a 1, se propaga hasta la entidad libre, lado de cardinalidad máxima N, y en ella será clave ajena que enlaza con editorial.

                -----------------------------------------

                Ejemplo 2-3

                -----------------------------------------

                Alcaraciones de la creación de una tabla: 
                    En el caso de crear una nueva tabla en medio la clave de esta suele ser la clace ajena del lado de la N más algún otro atributo.

            2.4 Todo tipo de interrelación 1:1, o desaparece uniendo las entidades que relaciona o se propaga la clave de una a la otra según nos pueda resultar más útil. 
                
                En este tipo de interrelaciones debemos tener en cuenta lo siguiente:

                    -Si las cardinalidades en ambas lados son (0,1), casi nunca se unen.
                    -En el caso de que ambas sean (1,1) puede resultar más simple unir las entidades, sobretodo si comparten la clave, a no ser que deseemos que la información de ambas entidades
                    se mantenga por separado o sea necesario mantenerlas por separado.
                    -En cualquier otro caso podría interesar unir las entidades o no según el contexto.
                    -En caso de unir las entidades los atributos de ambas se integran en la entidad resultado.
                
                CASO-1 [union de entidades]:
                    suele hacerse en casos de que la cardinalidad en ambos lados sea (1,1), ya que una ocurrencia de la primera entidad siempres tendrá relación con una sola ocurrencia
                    de la segunda, y viceversa. Realmente hablamos de dos ocurrencias íntimamente unidas en la que una no existe sin la otra.
                    En el caso de que alguna de las dos entidades no fuese (1,1) también se podría considerar unirlas con un razonamiento parecido.

                CASO-2 [mantener las entidades por serparado y propagamos la clave]:
                    En caso de propagar la clave de una a otra lo haremos en el sentido que nos pueda resultar más útil sobretodo a nivel de consultas.

            2.5 En las interrelaciones reflexivas se aplicarán las 4 primeras reglas considerando la entidad como si fuera dos copias de la misma realidad.

                ---------------

                EJEMPLO 2-5

                ---------------

                Serán como relaciones binarias en las que participa una sola entidad, se pueden dar los siguientes casos:

                CASO-1: si el tipo de correspondencia es 1:1, el atributo que hace de clave de la entidad, se duplica, haciendo funciones la primera copia de clave 
                y la otra de clave ajena de si misma. También cabe la posibilidad de unir las entidades, pero esto cambiaría conceptualmente el problema dándole otro 
                punto de vista. En el ejemplo si unieramos las entidades se transformarían en la entidad "Pareja".

                -------------------------------
                Ejemplo 2-5 (persona es_pareja)
                -------------------------------
                Ejemplo 2-5-1
                -------------------------------

                CASO-2: Si el tipo de correspondencia es 1:N podríamos encontrar que se propaga la clave, en este caso se procedería como en el caso anterior, o también 
                puede que se cree una tabla en medio como dice la regla genérica del 1:N.

                -------------------------------
                Ejemplo 2-5 (persona responde)
                -------------------------------
                Ejemplo 2-5-2
                -------------------------------
                Ejemplo 2-5-3 
                caption: ejemplo con tabla en medio
                -------------------------------

                CASO-3: Si el tiempo de correspondencia de la relación reflexiva es N:M se trata igual que las relaciones N:M pero antes deberíamos analizar si nos pudiera 
                interesar crear una entidad nueva que almacene el concepto de la interrelación.
                En este tipo de casos también aparecerá tabla en medio que incluirá los atributos de la interrelación si los hay.

                -------------------------------
                Ejemplo 2-6
                -------------------------------

            2.6. En las interrelaciones ternarias y superiores, si existen más de una cardinalidad máxima N se creará una tabla en medio. A esta nueva tabla, se propagarán
                las claves de todas las entidades que relaciona donde las demás serán claves ajenas y además contendrá los atributos que puediera haber en la interrelación.

                Normalmente la clave de la tabla que sale en medio, será la commbinación de las claves ajenas de máximo N.

                -------------------------------
                Ejemplo 2-6-1
                -------------------------------

            2.7 En las interrelaciones jerárquicas normalmente se propaga la clave del supertipo a todos los subtipos donde, además de ser clave ajenas que las enlazan con 
            el supertipo, serán clave de los subtipos.
            Para esta transformación debemos recordar que:

                1: Los atributos comunes a todos los subtipos estarán en el supertipo.
                2: Los atributos específicos de cada subtipo estarán en el subtipo correspondiente.
                3: Los subtipos siempre se relacionan con el supertipo.

            Teniendo en cuenta a todo lo anterior, para pasar las relaciones jerárquicas al relacional, aplicaremos una de las siguientes reglas:

                - Integrar todas la entidades supertipo y subtipo en una sola, eliminando así los subtipos, es decir, unir toda la jerarquía en una sola entidad, el supertipo.
                -

        3 Opciones de clave ajena en la transformación del modelo E/R al relacional

            tupla = ocurrencia
            
            Podemos implementar una base de datos en un archivo a la hora de crear los atributos que seran claves ajenas, aparte de su tipo se podrá especificar algunas de estas
            Características que nos permitan regular el comportamiento de la base de datos cuando se produzcan actualizaciones y/o insercción de tuplas . Cuando introducimos o 
            modificamos tuplas, estas pueden influir en otras tuplas de otras tablas que hagan referencia a las primeras a través de la clave ajena. Las Características de la clave 
            ajena son las siguientes:

            Posibles opciones a aplicar a la clave ajena al crear la tabla a la que pertenece:
                - NOT NULL
                - "NADA"
                
                En el primer caso, la clave ajena no se puede quedar vacía, se obliga a rellenarla y por tanto la cardinalidad mínima en la otra entidad es 1.
                En el segundo caso, la clave ajena puede estar vacía, la cardinalidad mínima en la otra entidad es por tanto 0.

            Posibles opciones a aplicar sobre la tabla referenciada:
                - ON DELETE, si la tupla referenciada se borrado
                - ON UPDATE, si la tupla referenciada se modicfica o actualiza

                En el primer caso,
                En el segundo caso,

            Posibles operaciones sobre la tupla o tuplas que referencian operaciones a aplicar a las tuplas de la tabla que referencia (donde están las claves ajenas) al borrar 
            o modificar la tupla de la tabla referenciada (donde apunta la flecha).

            Las posibles opciones de clave ajena cuando se borran o modifican ocurrencias en la tabla referenciada son las siguientes:
                - NO ACTION
                - CASCADE 
                - SET NULL
                - SET DEFAULT

                *En el primer caso (NO ACTION), si hay tuplas que dependen de otra tupla referenciada que se borra o modifica no se deja realizar la acción.
                *En el segundo caso (CASCADE), si hay tuplas que depende de otra tupla referenciada, al modificar estas, las primeras también se modifican y si se borra la tupla
                referenciada las que dependen de ella también se borra.
                *En el tercer caso (SET NULL), si hay tuplas que dependen de otra tupla referenciada que se borra o modifica, se pone a NULL los campos clave ajena de las tuplas 
                que la referencia. Esta operación es incompatible con el NOT NULL.
                *En el cuarto caso (SET DEFAULT), si hay tuplas que dependen de otra tupla referenciada que se borra o modifica, se pone a su valor por defecto los campos clave ajena
                de aquellas tuplas que lo referencian. Nos referimos al valor por defecto del campo clave ajena.

            Respecto a la clave ajena se puede poner una de estas opciones para el borrado y otra totalmente distinta para la actualización.
            

