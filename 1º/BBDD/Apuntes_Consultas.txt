Consultar los registros de una tabla o lista (SELECT)

    [ ACLARACIONES ]

    + Se pueden consultar tablas enteras, columnas sueltas y conbinaciones de estas.
    
    + Existen muchísimas conbinaciones de la orden SELECT, así que las veremos poco a poco hasta completar todas sus posibilidades.

    + A continuación en todos los puntos en donde se haga referencia a una tabla igualmente se podía hacer referencia a una vista.

------------------------------------------------------------------------------------------------------------------------------------

SELECCIÓN SIMPLE DE UNA SOLA TABLA
    
    -> SELECT [campos] FROM [tabla];

    -> SELECT * FROM version;
    -> SELECT modelo,peso FROM version;

    Selecciona y muestra, o todos los campos o solos los indicados de una tabla concreta.

------------------------------------------------------------------------------------------------------------------------------------

SELECCIÓN CON CONDICIONES

    Para poner una condición a una sentencia SELECT se hace añadiendo tras las [tablas] del FROM la cláusula WHERE. Puede utilizarse 
    AND/OR/NOT/()/etc... y de forma genérica los mismo operadores que en programación.

    -> SELECT [campos] FROM [tabla] WHERE [condicion/es];

    -> SELECT * FROM version WHERE peso > 1000;
    -> SELECT * FROM montadocon WHERE PrecioBase < 15000 AND Consumo < 9;
    -> SELECT Modelo,Version,PrecioBase,Consumo FROM montadocon WHERE PrecioBase < 15000 AND Consumo < 9;

------------------------------------------------------------------------------------------------------------------------------------

SELECCIÓN SIMPLE DE MÁS DE UNA TABLA

    Se han de especificar los campos que se desea que aparezca en el listado, debiendo además indicar la tabla a la que pertenece. Todas 
    las tablas que se utilicen en el SELECT deben aparecer tras el FROM pudiendose visualizar cualquier campo de esas tablas.
    
    -> SELECT [tabla1].campo1,[tablaN].campoN FROM tabla1,tabla2,tablaN;
    -> SELECT marca.nombre, modelo.nombre, pais FROM marca,modelo;

    NOTA IMPORTANTE:
    [Al hacer un SELECT de más de una tabla, el resultado es la combinación de todos los registros de cada una de las 
    tablas implicadas, es decir, si hacemos un SELECT sin condiciones de dos tablas con 3 y 5 registros respectivamente, nos saldran 15
    combinaciones posibles, o lo que es lo mismo, el < producto cartesiano >. Si por ejemplo tenemos 3 tablas con 3, 5 y 4 registros 
    respectivamente, nos saldran 60 combinaciones posibles.]

    Los nombres de las tablas que aparecen previamente a los campos solo es obligatoriamente ponerlos cuando el nombre del campo esté
    repetido en 2 o más tablas de las implicadas en la consulta. De esta forma se distingue los campos con igual nombre de diferentes 
    tablas.

    NOTA {Uso de alias en las tablas para hacer más cortas las sentencias.}:
    [Se pueden usar "alias" para hacer algo más cortas las sentencias, para esto cuando especificamos las tablas en el FROM se le puede 
    añadir un alias más corto a continuación, que se puede usar indistintamente igual que el nombre de la tabla. Hay que tener en cuenta 
    que los alias solo funcionan en la sentencia donde se especifica.
    Se pueden utilizar los alias también en sentencia UPDATE y DELETE, para hacer referencia en una subconsulta a un campo de la consulta 
    padre.]
   
------------------------------------------------------------------------------------------------------------------------------------

OPERADORES

    Según una primera clasificacion tenemos [unarios] y [biniarios], que son aquellos operadores que tienen uno o dos operadores respectivamente. 
    Pero existe otra clasificación por tipos que es la que vamos a ver.

    -OPERADORES DE COMPARACIÓN Y LÓGICOS

        [ = ], [ <> ó != ], [ < ], [ > ], [ <= ], [ >= ], [ NOT ], [ AND ], [ OR ]
    
    -OPERADORES ARITMÉTICOS

        Se pueden combinar como se deseen y tendrán la misma precedencia que las expresiones regulares en programación. Se pueden usar los paréntesis 
        para variar esa precedencia.
        
        [+,-]        -> sumar y restar          {SELECT Salario+Pluses FROM empleados;} //si se topa con un null el resultado es null
        [+,-]        -> positivo y negativo     {... WHERE valor=-1;}
        [*,/]        -> miltiplicar y dividir
        [DIV]        -> división entera
        [MOD]        -> resto de la división
        [%]          -> resto de la división
        [pow(b,e)]   -> potencia
        [(,)]        -> paréntesis              {permite modificar la precedencia y agrupar operadores}

        La precedencia de los operadores la podemos apreciar en la siguiente lista de menor a mayor precedencia. Lo operadores que están en la misma linea 
        tienen la misma precedencia y se procesaran de izquierda a derecha en el mismo orden en el que se encuentran.

        1  -> :=
        2  -> !!,OR,XOR
        3  -> &&,AND
        4  -> NOT,!
        5  -> BETWEEN,CASE,WHEN,THEN,ELSE
        6  -> =,<=,>=,<,>,!=,IS,LIKE,IN
        7  -> !
        8  -> &
        9  -> <<,>>
        10 -> -,+
        11 -> *,/,DIV,%,MOD
        12 -> ^
        13 -> -(numero)
        14 -> !
        15 -> BINARY,COLLATE

    -OPERADORES DE CARACTERES

        El operador LIKE sirve para seleccionar cadenas de caracteres parecidas a un patrón. Tiene los comodines % y _ que representan lo mismo que el * y la ? 
        respectivamente del MS2,es decir, el % equivale a 0 o a varios caracteres faltantes y el _ equivale a un solo caracter faltante.

        -> nombreCampo[NOT] LIKE [BINARY]"patron"

        -> WHERE Nombre LIKE "Marti%";

    -OPERADORES ESPECIALES Y DE GRUPO

        [NOT] IN        - Comprueba si el valor del campo es igual a algun valor de la lista o subconsulta.
        [NOT] BETWEEN   - Comprueba si el valor del campo está o no entre los valores indicados, incluyendo los extremos. También funciona con cadena de caracteres.
        IS [NOT] NULL   - Comprueba si el valor del campo es o no nulo.

        -> nombreCampo [NOT] IN (listaValores/subconsulta)
        -> nombreCampo [NOT] BETWEEN (inicio) AND (fin)
        -> nombreCampo IS [NOT] NULL

    -SELECCIÓN CON ORDENACIÓN (ORDER BY)

        -> SELECT Campo/s FROM tabla/s [WHERE CONDITION] ... [ORDER BY [BINARY] campo|numero|expresión [ASC/DESC][,...]];

        Todos los resultados hasta ahora obtenidos con un SELECT se pueden ordenar por cualquiera de los campos que aparezcan en las tablas de la consulta, incluso 
        aunque no aparezcan en el resultado. Para hacer la ordenación se añade al final la cláusula ORDER BY y el campo o campos de ordenación [ASC/DESC], permitiendo  
        incluso que aparezca como criterio de ordenación una expresión o función.

        NOTAS SOBRE ORDER BY: 

            -La ordenación puede realizarse incluso por un campo que no aparezca en el SELECT, pero si debe de estar en alguna de las tablas del FROM.
            -También podemos indicar el número de campo o la expresión por la que queremos ordenar, siendo este número la posición que ocupa ese campo en la lista del 
            SELECT o la expresión regular por la que queremos ordenar.
            -Se puede ordenar por más de una columna, tanto de forma ascendente(opción por defecto) como descendente.
            -Para ordenar por más de un campo estos se deben separar por comas y en caso de igualdad en el primer campo, se ordenaría por el segundo y así sucesivamente.
            -La cláusula BINARY permitirá distinguir en la ordenación, las mayúsculas de las minúsculas.
            -Si indicamos una ordenación para un campo enumerado (ENUM) su contenido será ordenado según el orden en que fueron definidos sus valores.